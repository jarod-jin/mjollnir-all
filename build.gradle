apply from: rootProject.rootDir.getAbsolutePath() + "/gradles/const.gradle"
apply from: rootProject.rootDir.getAbsolutePath() + "/gradles/utils.gradle"

/** ******************************************************************************************/

/**
 * 编译脚本
 */
buildscript {
    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/repositories/central/" }
        mavenCentral()
    }

    /*
    Spring Cloud与Spring Boot版本匹配关系
    Spring Cloud	Spring Boot
    Finchley	    兼容Spring Boot 2.0.x，不兼容Spring Boot 1.5.x
    Dalston	        兼容Spring Boot 1.5.x，不兼容Spring Boot 2.0.x
    Edgware	        兼容Spring Boot 1.5.x，不兼容Spring Boot 2.0.x
    Camden	        兼容Spring Boot 1.4.x，也兼容Spring Boot 1.5.x
    Brixton	        兼容Spring Boot 1.3.x，也兼容Spring Boot 1.4.x
    Angel	        兼容Spring Boot 1.2.x
    */

    ext {
        springBootVersion = "2.1.0.RELEASE"
        springBootAdminVersion = "2.1.1"
        springCloudVersion = "Greenwich.M1"//"Dalston.SR4"
        dockerPluginVersion = "3.2.4"
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("com.bmuschko:gradle-docker-plugin:${dockerPluginVersion}")
    }
}


//子模块配置
subprojects {
    apply from: gradlesPath + "const.gradle"
    apply from: gradlesPath + "utils.gradle"
    apply from: gradlesPath + "versions.gradle"

    apply plugin: "java"

    //JVM 版本号要求
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    //java编译的时候缺省状态下会因为中文字符而失败
    [compileJava, compileTestJava, javadoc]*.options*.encoding = "UTF-8"

    //打包源代码
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = "sources"
        from sourceSets.main.allSource
    }

    task deleteOut(type: Delete) {
        delete 'out'
    }

    artifacts {
        archives sourcesJar
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    dependencies {
        compile fileTree(dir: "libs", include: ["*.jar"])
    }
}


allprojects {
    //公共插件
    apply plugin: 'maven'
    apply plugin: "idea"

    group "${projectGroup}"
    version "${projectVersion}"

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url 'http://maven.springframework.org/release' }
        maven { url 'http://maven.springframework.org/milestone' }
    }
}